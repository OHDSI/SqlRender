To,Pattern,Replacement
oracle,"INSERT INTO @table (@columns) VALUES (@values1),(@values2)",<start_of_insert> INSERT INTO @table (@columns) VALUES (INTO @table <par_open>@columns<par_close> VALUES <par_open>@values1<par_close>\n INTO @table <par_open>@columns<par_close> VALUES <par_open>@values2<par_close>\n)
oracle,INTO @table <par_open>@columns<par_close> VALUES <par_open>INTO @table <par_open>@columns<par_close> VALUES,INTO @table <par_open>@columns<par_close> VALUES
oracle,<start_of_insert> @a INSERT INTO @table (@columns) VALUES (@b),INSERT ALL\n@bSELECT * FROM dual
oracle,<par_open>,(
oracle,<par_close>,)
oracle,EXCEPT,MINUS
oracle,"CONCAT(@a, @b, @c)","CONCAT(@a, CONCAT(@b, @c))"
oracle,"DATEADD(second,@seconds,@datetime)","(@date + NUMTODSINTERVAL(@seconds, 'second'))"
oracle,"DATEADD(minute,@minutes,@datetime)","(@date + NUMTODSINTERVAL(@minutes, 'minute'))"
oracle,"DATEADD(hour,@hours,@datetime)","(@date + NUMTODSINTERVAL(@hours, 'hour'))"
oracle,"DATEADD(d,@days,@date)","(@date + NUMTODSINTERVAL(@days, 'day'))"
oracle,"DATEADD(dd,@days,@date)","(@date + NUMTODSINTERVAL(@days, 'day'))"
oracle,"DATEADD(day,@days,@date)","(@date + NUMTODSINTERVAL(@days, 'day'))"
oracle,"DATEADD(month,@months,@date)","ADD_MONTHS(@date, @months)"
oracle,"DATEADD(mm,@months,@date)","ADD_MONTHS(@date, @months)"
oracle,"DATEADD(m,@months,@date)","ADD_MONTHS(@date, @months)"
oracle,"DATEADD(year,@years,@date)","ADD_MONTHS(@date, 12 * @years)"
oracle,"DATEADD(yyyy,@years,@date)","ADD_MONTHS(@date, 12 * @years)"
oracle,"DATEADD(yy,@years,@date)","ADD_MONTHS(@date, 12 * @years)"
oracle,"DATEDIFF(day,@start, @end)",(CAST(@end AS DATE) - CAST(@start AS DATE))
oracle,"DATEDIFF(dd,@start, @end)",(CAST(@end AS DATE) - CAST(@start AS DATE))
oracle,"DATEDIFF(d,@start, @end)",(CAST(@end AS DATE) - CAST(@start AS DATE))
oracle,"CONVERT(VARCHAR,@date,112)","TO_CHAR(@date, 'YYYYMMDD')"
oracle,GETDATE(),SYSDATE
oracle,+ '@a',|| '@a'
oracle,'@a' +,'@a' ||
oracle,CAST(@a AS varchar(@b)) +,CAST(@a AS varchar(@b)) ||
oracle,+ CAST(@a AS varchar(@b)),|| CAST(@a AS varchar(@b))
oracle,CAST(@a AS varchar) +,CAST(@a AS varchar) ||
oracle,+ CAST(@a AS varchar),|| CAST(@a AS varchar)
oracle,"CONVERT(DATE, @a)","TO_DATE(@a, 'yyyymmdd')"
oracle,CAST(@a AS VARCHAR(@b)),TO_CHAR(@a)
oracle,CAST(@a AS VARCHAR),TO_CHAR(@a)
oracle,"DATEFROMPARTS(@year,@month,@day)","TO_DATE(TO_CHAR(@year,'0000')||'-'||TO_CHAR(@month,'00')||'-'||TO_CHAR(@day,'00'), 'YYYY-MM-DD')"
oracle,"DATETIMEFROMPARTS(@year,@month,@day,@hour,@minute,@second,@ms)","TO_DATE(TO_CHAR(@year,'0000')||'-'||TO_CHAR(@month,'00')||'-'||TO_CHAR(@day,'00')||' '||TO_CHAR(@hour,'00')||':'||TO_CHAR(@minute,'00')||':'||TO_CHAR(@second,'00'), 'YYYY-MM-DD HH24:MI:SS')"
oracle,EOMONTH(@date),LAST_DAY(@date)
oracle,STDEV(@a),STDDEV(@a)
oracle,VAR(@a),VARIANCE(@a)
oracle,RAND(),DBMS_RANDOM.VALUE
oracle,CEILING(@a),CEIL(@a)
oracle,"HASHBYTES('MD5',@a)","DBMS_CRYPTO.HASH(@a,2)"
oracle,LEN(@a),LENGTH(@a)
oracle,"LEFT(@str,@chars)","SUBSTR(@str,0,@chars)"
oracle,"RIGHT(@str,@chars)","SUBSTR(@str,-@chars)"
oracle,"LOG(@expression,@base)","<L_O_G>(@base,@expression)"
oracle,LOG(@expression),"LOG(2.718281828459,@expression)"
oracle,<L_O_G>,LOG
oracle,LOG10(@expression),"LOG(10,@expression)"
oracle,"ISNULL(@a,@b)","NVL(@a,@b)"
oracle,ISNUMERIC(@a),"(LENGTH(TRIM(TRANSLATE(@a, ' +-.0123456789',' '))) IS NULL)"
oracle,COUNT_BIG(@a),COUNT(@a)
oracle,SQUARE(@a),((@a)*(@a))
oracle,PI(),3.141592654
oracle,NEWID(),SYS_GUID()
oracle,"CHARINDEX(@a,@b)","INSTR(@b,@a)"
oracle,SELECT @a WHERE @b;,SELECT @a FROM DUAL WHERE @b;
oracle,(SELECT @a WHERE @b),(SELECT @a FROM DUAL WHERE @b)
oracle,SELECT @a WHERE @b UNION,SELECT @a FROM DUAL WHERE @b UNION
oracle,SELECT @a;,SELECT @a FROM DUAL;
oracle,(SELECT @a),(SELECT @a FROM DUAL)
oracle,SELECT @a UNION,SELECT @a FROM DUAL UNION
oracle,SELECT @a FROM @b FROM DUAL;,SELECT @a FROM @b;
oracle,FROM @a FROM DUAL,FROM @a
oracle,FROM @a FROM DUAL,FROM @a
oracle,FROM @a FROM DUAL,FROM @a
oracle,FROM @a FROM DUAL,FROM @a
oracle,YEAR(@date),EXTRACT(YEAR FROM @date)
oracle,MONTH(@date),EXTRACT(MONTH FROM @date)
oracle,DAY(@date),EXTRACT(DAY FROM @date)
oracle,"IF OBJECT_ID('@table', 'U') IS NULL CREATE TABLE @table (@definition);",BEGIN\n  EXECUTE IMMEDIATE 'CREATE TABLE @table (@definition)';\nEXCEPTION\n  WHEN OTHERS THEN\n    IF SQLCODE != -955 THEN\n      RAISE;\n    END IF;\nEND;
oracle,"IF OBJECT_ID('tempdb..#@table', 'U') IS NOT NULL DROP TABLE #@table;",BEGIN\n  EXECUTE IMMEDIATE 'TRUNCATE TABLE %temp_prefix%%session_id%@table';\n  EXECUTE IMMEDIATE 'DROP TABLE %temp_prefix%%session_id%@table';\nEXCEPTION\n  WHEN OTHERS THEN\n    IF SQLCODE != -942 THEN\n      RAISE;\n    END IF;\nEND;
oracle,"IF OBJECT_ID('@table', 'U') IS NOT NULL DROP TABLE @table;",BEGIN\n  EXECUTE IMMEDIATE 'TRUNCATE TABLE @table';\n  EXECUTE IMMEDIATE 'DROP TABLE @table';\nEXCEPTION\n  WHEN OTHERS THEN\n    IF SQLCODE != -942 THEN\n      RAISE;\n    END IF;\nEND;
oracle,USE @schema;,ALTER SESSION SET current_schema = @schema;
oracle,.dbo.,.
oracle,CREATE CLUSTERED INDEX,CREATE INDEX
oracle,CREATE UNIQUE INDEX @name ON @table (@variable);,BEGIN\n  EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX @name ON @table (@variable)';\nEXCEPTION\n  WHEN OTHERS THEN\n    IF SQLCODE != -1408 THEN\n      RAISE;\n    END IF;\nEND;
oracle,CREATE UNIQUE CLUSTERED INDEX @name ON @table (@variable);,BEGIN\n  EXECUTE IMMEDIATE 'CREATE UNIQUE INDEX @name ON @table (@variable)';\nEXCEPTION\n  WHEN OTHERS THEN\n    IF SQLCODE != -1408 THEN\n      RAISE;\n    END IF;\nEND;
oracle,PRIMARY KEY NONCLUSTERED,PRIMARY KEY
oracle,DATETIME,TIMESTAMP
oracle,BIGINT,NUMBER(19)
oracle,VARCHAR(MAX),CLOB
oracle,WITH @a AS @b SELECT @c INTO @d FROM @e;,CREATE TABLE @d\nAS\nWITH @a AS @b SELECT\n@c\nFROM\n@e;
oracle,WITH @a AS @b INSERT INTO @c SELECT @d;,INSERT INTO @c WITH @a AS @b SELECT @d;
oracle,SELECT @a INTO @b FROM @c;,CREATE TABLE @b AS\nSELECT\n@a\nFROM\n@c;
oracle,SELECT @a INTO @b;,CREATE TABLE @b AS\nSELECT\n@a;
oracle,##,<hash><hash>
oracle,#,%temp_prefix%%session_id%
oracle,<hash><hash>,##
oracle,SELECT TOP @([0-9]+)rows @a;,SELECT @a WHERE ROWNUM <= @rows; 
oracle,SELECT @a WHERE @b WHERE ROWNUM <= @rows;,SELECT @a WHERE @b AND ROWNUM <= @rows;
postgresql,"ROUND(@a,@b)","ROUND(CAST(@a AS NUMERIC),@b)"
postgresql,"CONVERT(DATE, @a)","TO_DATE(@a, 'yyyymmdd')"
postgresql,"DATEADD(second,@seconds,@datetime)",(@datetime + @seconds*INTERVAL'1 second')
postgresql,"DATEADD(minute,@minutes,@datetime)",(@datetime + @minutes*INTERVAL'1 minute')
postgresql,"DATEADD(hour,@hours,@datetime)",(@datetime + @hours*INTERVAL'1 hour')
postgresql,"DATEADD(d,@days,@date)",(@date + @days*INTERVAL'1 day')
postgresql,"DATEADD(dd,@days,@date)",(@date + @days*INTERVAL'1 day')
postgresql,"DATEADD(day,@days,@date)",(@date + @days*INTERVAL'1 day')
postgresql,"DATEADD(m,@months,@date)",(@date + @months*INTERVAL'1 month')
postgresql,"DATEADD(mm,@months,@date)",(@date + @months*INTERVAL'1 month')
postgresql,"DATEADD(month,@months,@date)",(@date + @months*INTERVAL'1 month')
postgresql,"DATEADD(yy,@years,@date)",(@date + @years*INTERVAL'1 year')
postgresql,"DATEADD(yyyy,@years,@date)",(@date + @years*INTERVAL'1 year')
postgresql,"DATEADD(year,@years,@date)",(@date + @years*INTERVAL'1 year')
postgresql,"DATEDIFF(d,@start, @end)",(CAST(@end AS DATE) - CAST(@start AS DATE))
postgresql,"DATEDIFF(dd,@start, @end)",(CAST(@end AS DATE) - CAST(@start AS DATE))
postgresql,"DATEDIFF(day,@start, @end)",(CAST(@end AS DATE) - CAST(@start AS DATE))
postgresql,"CONVERT(VARCHAR,@date,112)","TO_CHAR(@date, 'YYYYMMDD')"
postgresql,GETDATE(),CURRENT_DATE
postgresql,+ '@a',|| '@a'
postgresql,'@a' +,'@a' ||
postgresql,CAST(@a AS varchar(@b)) +,CAST(@a AS varchar(@b)) ||
postgresql,+ CAST(@a AS varchar(@b)),|| CAST(@a AS varchar(@b))
postgresql,CAST(@a AS varchar) +,CAST(@a AS varchar) ||
postgresql,+ CAST(@a AS varchar),|| CAST(@a AS varchar)
postgresql,"DATEFROMPARTS(@year,@month,@day)","TO_DATE(TO_CHAR(@year,'0000')||'-'||TO_CHAR(@month,'00')||'-'||TO_CHAR(@day,'00'), 'YYYY-MM-DD')"
postgresql,"DATETIMEFROMPARTS(@year,@month,@day,@hour,@minute,@second,@ms)","TO_DATE(TO_CHAR(@year,'0000')||'-'||TO_CHAR(@month,'00')||'-'||TO_CHAR(@day,'00')||' '||TO_CHAR(@hour,'00')||':'||TO_CHAR(@minute,'00')||':'||TO_CHAR(@second,'00'), 'YYYY-MM-DD HH24:MI:SS')"
postgresql,YEAR(@date),EXTRACT(YEAR FROM @date)
postgresql,MONTH(@date),EXTRACT(MONTH FROM @date)
postgresql,DAY(@date),EXTRACT(DAY FROM @date)
postgresql,EOMONTH(@date),"(DATE_TRUNC('MONTH', @date) + INTERVAL '1 MONTH - 1 day')::DATE"
postgresql,STDEV(@a),STDDEV(@a)
postgresql,VAR(@a),VARIANCE(@a)
postgresql,RAND(),RANDOM()
postgresql,"HASHBYTES('MD5',@a)",MD5(@a)
postgresql,LEN(@a),CHAR_LENGTH(@a)
postgresql,"CHARINDEX(@a,@b)","STRPOS(@b,@a)"
postgresql,"LOG(@expression,@base)","<L_O_G>(CAST((@base) AS NUMERIC),CAST((@expression) AS NUMERIC))"
postgresql,LOG(@expression),LN(CAST((@expression) AS REAL))
postgresql,<L_O_G>,LOG
postgresql,LOG10(@expression),"LOG(10,CAST((@expression) AS NUMERIC))"
postgresql,"ISNULL(@a,@b)","COALESCE(@a,@b)"
postgresql,ISNUMERIC(@a),(@a ~ '^([0-9]+\.?[0-9]*|\.[0-9]+)$')
postgresql,COUNT_BIG(@a),COUNT(@a)
postgresql,SQUARE(@a),((@a)*(@a))
postgresql,NEWID(),MD5(RANDOM()::TEXT || CLOCK_TIMESTAMP()::TEXT)
postgresql,USE @schema;,SET search_path TO @schema;
postgresql,"IF OBJECT_ID('@table', 'U') IS NULL CREATE TABLE @table (@definition);",CREATE TABLE IF NOT EXISTS @table (@definition);
postgresql,"IF OBJECT_ID('@table', 'U') IS NOT NULL DROP TABLE @table;",DROP TABLE IF EXISTS @table;
postgresql,"IF OBJECT_ID('tempdb..#@table', 'U') IS NOT NULL DROP TABLE @table;",DROP TABLE IF EXISTS @table;
postgresql,.dbo.,.
postgresql,CREATE TABLE #@table (@definition),CREATE TEMP TABLE @table (@definition)
postgresql,CREATE CLUSTERED INDEX @index_name ON @table (@variable);,CREATE INDEX @index_name ON @table (@variable);\nCLUSTER @table USING @index_name;
postgresql,CREATE UNIQUE CLUSTERED INDEX @index_name ON @table (@variable);,CREATE UNIQUE INDEX @index_name ON @table (@variable);\nCLUSTER @table USING @index_name;
postgresql,PRIMARY KEY NONCLUSTERED,PRIMARY KEY
postgresql,DATETIME,TIMESTAMP
postgresql,VARCHAR(MAX),TEXT
postgresql,FLOAT,NUMERIC
postgresql,WITH @a AS @b SELECT @c INTO #@d FROM @e;,CREATE TEMP TABLE @d\nAS\nWITH @a AS @b SELECT\n@c\nFROM\n@e;
postgresql,WITH @a AS @b SELECT @c INTO @d FROM @e;,CREATE TABLE @d\nAS\nWITH @a AS @b SELECT\n@c\nFROM\n@e;
postgresql,SELECT @a INTO #@b FROM @c;,CREATE TEMP TABLE @b\nAS\nSELECT\n@a\nFROM\n@c;
postgresql,SELECT @a INTO @b FROM @c;,CREATE TABLE @b AS\nSELECT\n@a\nFROM\n@c;
postgresql,SELECT @a INTO @b;,CREATE TABLE @b AS\nSELECT\n@a;
postgresql,#,
postgresql,SELECT TOP @([0-9]+)rows @a;,SELECT @a LIMIT @rows;
redshift,"ROUND(@a,@b)","ROUND(CAST(@a AS FLOAT),@b)"
redshift,"CONVERT(DATE, @a)","TO_DATE(@a, 'yyyymmdd')"
redshift,"DATEADD(second,@seconds,@datetime)",(@datetime + @seconds*INTERVAL'1 second')
redshift,"DATEADD(minute,@minutes,@datetime)",(@datetime + @minutes*INTERVAL'1 minute')
redshift,"DATEADD(hour,@hours,@datetime)",(@datetime + @hours*INTERVAL'1 hour')
redshift,"DATEADD(d,@days,@date)",(@date + @days*INTERVAL'1 day')
redshift,"DATEADD(dd,@days,@date)",(@date + @days*INTERVAL'1 day')
redshift,"DATEADD(day,@days,@date)",(@date + @days*INTERVAL'1 day')
redshift,"DATEADD(m,@months,@date)","ADD_MONTHS(@date, @months)"
redshift,"DATEADD(mm,@months,@date)","ADD_MONTHS(@date, @months)"
redshift,"DATEADD(month,@months,@date)","ADD_MONTHS(@date, @months)"
redshift,"DATEADD(yy,@years,@date)","ADD_MONTHS(@date, 12*@months)"
redshift,"DATEADD(yyyy,@years,@date)","ADD_MONTHS(@date, 12*@months)"
redshift,"DATEADD(year,@years,@date)","ADD_MONTHS(@date, 12*@months)"
redshift,"DATEDIFF(d,@start, @end)",(CAST(@end AS DATE) - CAST(@start AS DATE))
redshift,"DATEDIFF(dd,@start, @end)",(CAST(@end AS DATE) - CAST(@start AS DATE))
redshift,"DATEDIFF(day,@start, @end)",(CAST(@end AS DATE) - CAST(@start AS DATE))
redshift,"CONVERT(VARCHAR,@date,112)","TO_CHAR(@date, 'YYYYMMDD')"
redshift,GETDATE(),CURRENT_DATE
redshift,+ '@a',|| '@a'
redshift,'@a' +,'@a' ||
redshift,CAST(@a AS varchar(@b)) +,CAST(@a AS varchar(@b)) ||
redshift,+ CAST(@a AS varchar(@b)),|| CAST(@a AS varchar(@b))
redshift,CAST(@a AS varchar) +,CAST(@a AS varchar) ||
redshift,+ CAST(@a AS varchar),|| CAST(@a AS varchar)
redshift,"DATEFROMPARTS(@year,@month,@day)","TO_DATE(TO_CHAR(@year,'0000')||'-'||TO_CHAR(@month,'00')||'-'||TO_CHAR(@day,'00'), ' YYYY- MM- DD')"
redshift,YEAR(@date),EXTRACT(YEAR FROM @date)
redshift,MONTH(@date),EXTRACT(MONTH FROM @date)
redshift,DAY(@date),EXTRACT(DAY FROM @date)
redshift,STDEV(@a),STDDEV(@a)
redshift,RAND(),RANDOM()
redshift,"HASHBYTES('MD5',@a)",MD5(@a)
redshift,LEN(@a),CHAR_LENGTH(@a)
redshift,"LOG(@expression,@base)",(LN(CAST((@expression) AS REAL))/LN(CAST((@base) AS REAL)))
redshift,LOG(@expression),LN(CAST((@expression) AS REAL))
redshift,LOG10(@expression),LOG(CAST((@expression) AS REAL))
redshift,"ISNULL(@a,@b)","COALESCE(@a,@b)"
redshift,ISNUMERIC(@a),(@a ~ '^([0-9]+\.?[0-9]*|\.[0-9]+)$')
redshift,COUNT_BIG(@a),COUNT(@a)
redshift,USE @schema;,SET search_path TO @schema;
redshift,"IF OBJECT_ID('@table', 'U') IS NULL CREATE TABLE @table (@definition);",CREATE TABLE IF NOT EXISTS @table (@definition);
redshift,"IF OBJECT_ID('@table', 'U') IS NOT NULL DROP TABLE @table;",DROP TABLE IF EXISTS @table;
redshift,"IF OBJECT_ID('tempdb..#@table', 'U') IS NOT NULL DROP TABLE @table;",DROP TABLE IF EXISTS @table;
redshift,.dbo.,.
redshift,HINT DISTRIBUTE_ON_KEY(@key) CREATE TABLE #@table (@definition),HINT DISTRIBUTE_ON_KEY(@key)\nCREATE TEMP TABLE @table (@definition) DISTKEY(@key)
redshift,CREATE TABLE #@table (@definition),CREATE TEMP TABLE @table (@definition)
redshift,HINT DISTRIBUTE_ON_KEY(@key) CREATE TABLE @table (@definition);,HINT DISTRIBUTE_ON_KEY(@key)\nCREATE TABLE @table (@definition) DISTKEY(@key);
redshift,HINT DISTRIBUTE_ON_KEY(@key) WITH @a AS @b SELECT @c INTO #@d FROM @e;,HINT DISTRIBUTE_ON_KEY(@key)\nCREATE TEMP TABLE @d DISTKEY(@key)\nAS\nWITH @a AS @b SELECT\n@c\nFROM\n@e;
redshift,HINT DISTRIBUTE_ON_KEY(@key) WITH @a AS @b SELECT @c INTO @d FROM @e;,HINT DISTRIBUTE_ON_KEY(@key)\nCREATE TABLE @d DISTKEY(@key)\nAS\nWITH @a AS @b SELECT\n@c\nFROM\n@e;
redshift,WITH @a AS @b SELECT @c INTO #@d FROM @e;,CREATE TEMP TABLE @d\nAS\nWITH @a AS @b SELECT\n@c\nFROM\n@e;
redshift,WITH @a AS @b SELECT @c INTO @d FROM @e;,CREATE TABLE @d\nAS\nWITH @a AS @b SELECT\n@c\nFROM\n@e;
redshift,HINT DISTRIBUTE_ON_KEY(@key) SELECT @a INTO #@b FROM @c;,HINT DISTRIBUTE_ON_KEY(@key)\nCREATE TEMP TABLE @b DISTKEY(@key)\nAS\nSELECT\n@a\nFROM\n@c;
redshift,SELECT @a INTO #@b FROM @c;,CREATE TEMP TABLE @b\nAS\nSELECT\n@a\nFROM\n@c;
redshift,HINT DISTRIBUTE_ON_KEY(@key) SELECT @a INTO @b FROM @c;,HINT DISTRIBUTE_ON_KEY(@key)\nCREATE TABLE @b DISTKEY(@key)\nAS\nSELECT\n@a\nFROM\n@c;
redshift,SELECT @a INTO @b FROM @c;,CREATE TABLE @b AS\nSELECT\n@a\nFROM\n@c;
redshift,SELECT @a INTO #@b;,CREATE TEMP TABLE @b AS\nSELECT\n@a;
redshift,SELECT @a INTO @b;,CREATE TABLE @b AS\nSELECT\n@a;
redshift,PRIMARY KEY NONCLUSTERED,PRIMARY KEY
redshift,DATETIME,TIMESTAMP
redshift,#,
redshift,SELECT TOP @([0-9]+)rows @a;,SELECT @a LIMIT @rows;
pdw,VARCHAR(MAX),VARCHAR(1000)
pdw,HINT DISTRIBUTE_ON_KEY(@key) WITH @a AS @b SELECT @c INTO @d FROM @e;,HINT DISTRIBUTE_ON_KEY(@key)\nCREATE TABLE @d WITH (DISTRIBUTION = HASH(@key))\nAS\nWITH @a AS @b SELECT\n@c\nFROM\n@e;
pdw,"WITH @a AS @b SELECT @c1 subject_id, @c2 INTO @d FROM @e;","CREATE TABLE @d WITH (DISTRIBUTION = HASH(subject_id))\nAS\nWITH @a AS @b SELECT\n@c1 subject_id, @c2\nFROM\n@e;"
pdw,"WITH @a AS @b SELECT @c1 person_id, @c2 INTO @d FROM @e;","CREATE TABLE @d WITH (DISTRIBUTION = HASH(person_id))\nAS\nWITH @a AS @b SELECT\n@c1 person_id, @c2\nFROM\n@e;"
pdw,"WITH @a AS @b SELECT @c1 analysis_id, @c2 INTO @d FROM @e;","CREATE TABLE @d WITH (DISTRIBUTION = HASH(analysis_id))\nAS\nWITH @a AS @b SELECT\n@c1 analysis_id, @c2\nFROM\n@e;"
pdw,WITH @a AS @b SELECT @c INTO @d FROM @e;,CREATE TABLE @d WITH (DISTRIBUTION = REPLICATE)\nAS\nWITH @a AS @b SELECT\n@c\nFROM\n@e;
pdw,HINT DISTRIBUTE_ON_KEY(@key) SELECT @a INTO @b FROM @c;,HINT DISTRIBUTE_ON_KEY(@key)\nCREATE TABLE @b WITH (DISTRIBUTION = HASH(@key))\nAS\nSELECT\n@a\nFROM\n@c;
pdw,"SELECT @a1 subject_id, @a2 INTO @b FROM @c;","CREATE TABLE @b WITH (DISTRIBUTION = HASH(subject_id))\nAS\nSELECT\n@a1 subject_id, @a2\nFROM\n@c;"
pdw,"SELECT @a1 person_id, @a2 INTO @b FROM @c;","CREATE TABLE @b WITH (DISTRIBUTION = HASH(person_id))\nAS\nSELECT\n@a1 person_id, @a2\nFROM\n@c;"
pdw,"SELECT @a1 analysis_id, @a2 INTO @b FROM @c;","CREATE TABLE @b WITH (DISTRIBUTION = HASH(analysis_id))\nAS\nSELECT\n@a1 analysis_id, @a2\nFROM\n@c;"
pdw,SELECT @a INTO @b FROM @c;,CREATE TABLE @b WITH (DISTRIBUTION = REPLICATE)\nAS\nSELECT\n@a\nFROM\n@c;
pdw,SELECT @a INTO @b;,CREATE TABLE @b WITH (DISTRIBUTION = REPLICATE)\nAS\nSELECT\n@a;
pdw,CREATE TABLE #@a WITH (DISTRIBUTION = @b) AS,"CREATE TABLE #@a WITH (LOCATION = USER_DB, DISTRIBUTION = @b) AS"
pdw,HINT DISTRIBUTE_ON_KEY(@key) CREATE TABLE @table (@definition);,HINT DISTRIBUTE_ON_KEY(@key)\nCREATE TABLE @table (@definition)\nWITH (DISTRIBUTION = HASH(@key));
pdw,CREATE TABLE @table (@definition_part1 subject_id @definition_part2);,CREATE TABLE @table (@definition_part1 subject_id @definition_part2)\nWITH (DISTRIBUTION = HASH(subject_id));
pdw,CREATE TABLE @table (@definition_part1 person_id @definition_part2);,CREATE TABLE @table (@definition_part1 person_id @definition_part2)\nWITH (DISTRIBUTION = HASH(person_id));
pdw,CREATE TABLE @table (@definition_part1 analysis_id @definition_part2);,CREATE TABLE @table (@definition_part1 analysis_id @definition_part2)\nWITH (DISTRIBUTION = HASH(analysis_id));
pdw,CREATE TABLE @table (@definition);,CREATE TABLE @table (@definition)\nWITH (DISTRIBUTION = REPLICATE);
pdw,CREATE TABLE #@table (@definition) WITH (DISTRIBUTION = @distribution);,"CREATE TABLE #@table (@definition)\nWITH (LOCATION = USER_DB, DISTRIBUTION = @distribution);"
pdw,TRUNCATE TABLE ,IF XACT_STATE() = 1 COMMIT; TR*NC*T* TABLE 
pdw,DROP TABLE ,IF XACT_STATE() = 1 COMMIT; DR*P TABLE 
pdw,CREATE TABLE ,IF XACT_STATE() = 1 COMMIT; CR**T* TABLE 
pdw,TR*NC*T*,TRUNCATE
pdw,DR*P,DROP
pdw,CR**T*,CREATE
pdw,IF OBJECT_ID(@a) IS NOT NULL IF XACT_STATE() = 1 COMMIT;,IF XACT_STATE() = 1 COMMIT; IF OBJECT_ID(@a) IS NOT NULL 
impala,"CHARINDEX(@a,@b)","INSTR(@b,@a)"
impala,COUNT_BIG(@a),COUNT(@a)
impala,"LEFT(@str,@chars)","SUBSTR(@str,1,@chars)"
impala,LEN(@a),LENGTH(@a)
impala,LOG(@expression),LN(@expression)
impala,NEWID(),UUID()
impala,"RIGHT(@str,@chars)","SUBSTR(@str,-@chars)"
impala,"ROUND(@a,@b)","ROUND(CAST(@a AS DOUBLE),@b)"
impala,SQUARE(@a),((@a)*(@a))
impala,STDEV(@a),STDDEV(@a)
impala,VAR(@a),VARIANCE(@a)
impala,"DATEADD(d,@days,CAST(@date AS DATE))","DATE_ADD(@date, @days)"
impala,"DATEADD(dd,@days,CAST(@date AS DATE))","DATE_ADD(@date, @days)"
impala,"DATEADD(day,@days,CAST(@date AS DATE))","DATE_ADD(@date, @days)"
impala,"DATEADD(month,@months,CAST(@date AS DATE))","ADD_MONTHS(@date, @months)"
impala,"DATEADD(mm,@months,CAST(@date AS DATE))","ADD_MONTHS(@date, @months)"
impala,"DATEADD(m,@months,CAST(@date AS DATE))","ADD_MONTHS(@date, @months)"
impala,"DATEADD(year,@years,CAST(@date AS DATE))","ADD_MONTHS(@date, 12 * @years)"
impala,"DATEADD(yyyy,@years,CAST(@date AS DATE))","ADD_MONTHS(@date, 12 * @years)"
impala,"DATEADD(yy,@years,CAST(@date AS DATE))","ADD_MONTHS(@date, 12 * @years)"
impala,"DATEADD(d,@days,@date)","DATE_ADD(CAST(@date AS DATE), @days)"
impala,"DATEADD(dd,@days,@date)","DATE_ADD(CAST(@date AS DATE), @days)"
impala,"DATEADD(day,@days,@date)","DATE_ADD(CAST(@date AS DATE), @days)"
impala,"DATEADD(month,@months,@date)","ADD_MONTHS(CAST(@date AS DATE), @months)"
impala,"DATEADD(mm,@months,@date)","ADD_MONTHS(CAST(@date AS DATE), @months)"
impala,"DATEADD(m,@months,@date)","ADD_MONTHS(CAST(@date AS DATE), @months)"
impala,"DATEADD(year,@years,@date)","ADD_MONTHS(CAST(@date AS DATE), 12 * @years)"
impala,"DATEADD(yyyy,@years,@date)","ADD_MONTHS(CAST(@date AS DATE), 12 * @years)"
impala,"DATEADD(yy,@years,@date)","ADD_MONTHS(CAST(@date AS DATE), 12 * @years)"
impala,"DATEDIFF(d,@start, @end)","DATEDIFF(CAST(@end AS DATE), CAST(@start AS DATE))"
impala,"DATEDIFF(dd,@start, @end)","DATEDIFF(CAST(@end AS DATE), CAST(@start AS DATE))"
impala,"DATEDIFF(day,@start, @end)","DATEDIFF(CAST(@end AS DATE), CAST(@start AS DATE))"
impala,DAY(@date),DAY(CAST(@date AS DATE))
impala,GETDATE(),NOW()
impala,MONTH(@date),MONTH(CAST(@date AS DATE))
impala,YEAR(@date),YEAR(CAST(@date AS DATE))
impala,CAST(@a AS DATE),"CASE TYPEOF(@a) WHEN 'TIMESTAMP' THEN CAST(@a AS TIMESTAMP) ELSE TO_UTC_TIMESTAMP(CONCAT_WS('-', SUBSTR(CAST(@a AS STRING), 1, 4), SUBSTR(CAST(@a AS STRING), 5, 2), SUBSTR(CAST(@a AS STRING), 7, 2)), 'UTC') END"
impala,"IF OBJECT_ID('@table', 'U') IS NULL CREATE TABLE @table (@definition);",CREATE TABLE IF NOT EXISTS @table (@definition);
impala,"IF OBJECT_ID('@table', 'U') IS NOT NULL DROP TABLE @table;",DROP TABLE IF EXISTS @table;
impala,WITH @a AS @b SELECT @c INTO @d FROM @e;,CREATE TABLE @d\nAS\nWITH @a AS @b SELECT\n@c\nFROM\n@e;
impala,SELECT @a INTO @b FROM @c;,CREATE TABLE @b AS\nSELECT\n@a\nFROM\n@c;
impala,SELECT @a INTO @b;,CREATE TABLE @b AS\nSELECT\n@a;
impala,SELECT DISTINCT @a FROM @b INTERSECT SELECT DISTINCT @a FROM @c;,SELECT t1.@a FROM (SELECT DISTINCT @a FROM @b UNION ALL SELECT DISTINCT @a FROM @c) AS t1 GROUP BY @a HAVING COUNT(*) >= 2;
impala,(SELECT DISTINCT @a FROM @b INTERSECT SELECT DISTINCT @a FROM @c),(SELECT t1.@a FROM (SELECT DISTINCT @a FROM @b UNION ALL SELECT DISTINCT @a FROM @c) AS t1 GROUP BY @a HAVING COUNT(*) >= 2)
impala,DELETE FROM @a;,/* DELETE FROM @a; */
impala,DELETE FROM @a WHERE @b;,/* DELETE FROM @a WHERE @b; */
impala,.dbo.,.
impala,##,<hash><hash>
impala,#,%temp_prefix%%session_id%
impala,<hash><hash>,##
impala,.location,.`location`
impala,SELECT TOP @([0-9]+)rows @a;,SELECT @a LIMIT @rows;
netezza,"ROUND(@a,@b)","ROUND(CAST(@a AS NUMERIC),@b)"
netezza,CAST(@a AS DATE),"TO_DATE(@a, 'yyyymmdd')"
netezza,CAST(@a AS INT),CAST(@a AS INTEGER)
netezza,CAST(@a AS VARCHAR),CAST(@a AS VARCHAR(1000))
netezza,"DATEADD(d,@days,@date)",(@date + @days)
netezza,"DATEADD(dd,@days,@date)",(@date + @days)
netezza,"DATEADD(day,@days,@date)",(@date + @days)
netezza,"DATEADD(m,@months,@date)",CAST((@date + @months*INTERVAL'1 month') AS DATE)
netezza,"DATEADD(mm,@months,@date)",CAST((@date + @months*INTERVAL'1 month') AS DATE)
netezza,"DATEADD(month,@months,@date)",CAST((@date + @months*INTERVAL'1 month') AS DATE)
netezza,"DATEADD(yy,@years,@date)",CAST((@date + @years*INTERVAL'1 year') AS DATE)
netezza,"DATEADD(yyyy,@years,@date)",CAST((@date + @years*INTERVAL'1 year') AS DATE)
netezza,"DATEADD(year,@years,@date)",CAST((@date + @years*INTERVAL'1 year') AS DATE)
netezza,"DATEDIFF(d,@start, @end)",(CAST(@end AS DATE) - CAST(@start AS DATE))
netezza,"DATEDIFF(dd,@start, @end)",(CAST(@end AS DATE) - CAST(@start AS DATE))
netezza,"DATEDIFF(day,@start, @end)",(CAST(@end AS DATE) - CAST(@start AS DATE))
netezza,GETDATE(),CURRENT_DATE
netezza,+ '@a',|| '@a'
netezza,'@a' +,'@a' ||
netezza,YEAR(@variable),"DATE_PART('YEAR', @variable)"
netezza,MONTH(@variable),"DATE_PART('MONTH', @variable)"
netezza,CAST(@a AS varchar(@b)) +,CAST(@a AS varchar(@b)) ||
netezza,+ CAST(@a AS varchar(@b)),|| CAST(@a AS varchar(@b))
netezza,YEAR(@date),EXTRACT(YEAR FROM @date)
netezza,MONTH(@date),EXTRACT(MONTH FROM @date)
netezza,STDEV(@a),STDDEV(@a)
netezza,LEN(@a),CHAR_LENGTH(@a)
netezza,"LOG(@expression,@base)",(LN(@expression)/LN(@base))
netezza,LOG(@expression),LN(@expression)
netezza,LOG10(@expression),LOG(@expression)
netezza,"ISNULL(@a,@b)","COALESCE(@a,@b)"
netezza,COUNT_BIG(@a),COUNT(@a)
netezza,USE @schema;,SET search_path TO @schema;
netezza,"IF OBJECT_ID('@table', 'U') IS NOT NULL DROP TABLE @table;",DROP TABLE @table IF EXISTS;
netezza,.dbo.,.
netezza,CREATE TABLE #@table (@definition),CREATE TEMP TABLE @table (@definition)
netezza,CREATE CLUSTERED INDEX @index_name ON @table (@variable);,CREATE INDEX @index_name ON @table (@variable);\nCLUSTER @table USING @index_name;
netezza,CREATE UNIQUE CLUSTERED INDEX @index_name ON @table (@variable);,CREATE UNIQUE INDEX @index_name ON @table (@variable);\nCLUSTER @table USING @index_name;
netezza,PRIMARY KEY NONCLUSTERED,PRIMARY KEY
netezza,VARCHAR(MAX),VARCHAR(1000)
netezza,FLOAT,NUMERIC
netezza,WITH @a AS @b SELECT @c INTO #@d FROM @e;,CREATE TEMP TABLE @d\nAS\nWITH @a AS @b SELECT\n@c\nFROM\n@e;
netezza,WITH @a AS @b SELECT @c INTO @d FROM @e;,CREATE TABLE @d\nAS\nWITH @a AS @b SELECT\n@c\nFROM\n@e;
netezza,SELECT @a INTO #@b FROM @c;,CREATE TEMP TABLE @b\nAS\nSELECT\n@a\nFROM\n@c;
netezza,SELECT @a INTO @b FROM @c;,CREATE TABLE @b AS\nSELECT\n@a\nFROM\n@c;
netezza,#,
netezza,"LEFT(@variable,@b)","STRLEFT(@variable,@b)"
netezza,"RIGHT(@variable,@b)","STRRIGHT(@variable,@b)"
netezza,SELECT TOP @([0-9]+)rows @a;,SELECT @a LIMIT @rows;
bigquery,"DATEDIFF(d,@start, @end)","DATE_DIFF(cast(@end as date), cast(@start as date), DAY)"
bigquery,"DATEDIFF(dd,@start, @end)","DATE_DIFF(cast(@end as date), cast(@start as date), DAY)"
bigquery,"DATEDIFF(day,@start, @end)","DATE_DIFF(cast(@end as date), cast(@start as date), DAY)"
bigquery,"DATEADD(d,@days,@date)","DATE_ADD(cast(@date as date), interval @days DAY)"
bigquery,"DATEADD(dd,@days,@date)","DATE_ADD(cast(@date as date), interval @days DAY)"
bigquery,"DATEADD(day,@days,@date)","DATE_ADD(cast(@date as date), interval @days DAY)"
bigquery,"DATEADD(m,@months,@date)","DATE_ADD(cast(@date as date), interval @months MONTH)"
bigquery,"DATEADD(mm,@months,@date)","DATE_ADD(cast(@date as date), interval @months MONTH)"
bigquery,"DATEADD(month,@months,@date)","DATE_ADD(cast(@date as date), interval @months MONTH)"
bigquery,"GETDATE()","CURRENT_DATE()"
bigquery,"STDEV(@a)","STDDEV(@a)"
bigquery,"HASHBYTES('MD5',@a)","SHA1(@a)"
bigquery,"LEN(@a)","LENGTH(@a)"
bigquery,"COUNT_BIG(@a)","COUNT(@a)"
bigquery,"CAST(@a as:string)","CAST(@a as string)"
bigquery,"CAST(@a as:integer)","CAST(@a as int64)"
bigquery,"CAST(@a as:float)","CAST(@a as float64)"
bigquery,"IF OBJECT_ID('@table', 'U') IS NOT NULL DROP TABLE @table;",DROP TABLE IF EXISTS @table;
bigquery,CAST(@a AS varchar(@b)),CAST(@a AS STRING)
bigquery,"WITH @a INTO #@b FROM","INTO #@b WITH @a FROM"
bigquery,"SELECT @a INTO #@b FROM","INTO #@b SELECT @a FROM"
bigquery,#,temp.
bigquery,"LEFT(@str,@chars)","SUBSTR(@str,0,@chars)"
bigquery,"RIGHT(@str,@chars)","SUBSTR(@str,-@chars)"
bigquery,"cast(@a as float)","cast(@a as float64)"
bigquery,"cast(@a as bigint)","cast(@a as int64)"
bigquery,"cast(@a as int)","cast(@a as int64)"
bigquery,"cast(@a as varchar)","cast(@a as string)"
bigquery,date(@a),cast(@a as date)
bigquery,"cast(concat(@a) as date)","parse_date('%Y%m%d', concat(@a))"
bigquery,"YEAR(@date)","EXTRACT(YEAR from @date)"
bigquery,"MONTH(@date)","EXTRACT(MONTH from @date)"
bigquery,"DAY(@date)","EXTRACT(DAY from @date)"
bigquery,"union select","union distinct select"
bigquery,SELECT DISTINCT @a FROM @b INTERSECT SELECT DISTINCT @a FROM @c;,SELECT t1.@a FROM (SELECT DISTINCT @a FROM @b UNION ALL SELECT DISTINCT @a FROM @c) AS t1 GROUP BY @a HAVING COUNT(*) >= 2;
bigquery,(SELECT DISTINCT @a FROM @b INTERSECT SELECT DISTINCT @a FROM @c),(SELECT t1.@a FROM (SELECT DISTINCT @a FROM @b UNION ALL SELECT DISTINCT @a FROM @c) AS t1 GROUP BY @a HAVING COUNT(*) >= 2)
bigquery,"ISNULL(@a,@b)","IFNULL(@a,@b)"
